// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using TL.DataAccess.Models;
using TL.Travel.DataAccess.Base;

namespace TL.Travel.DataAccess.Oracle;

public partial class TLTravelDbContext : BaseTLTravelDbContext
{
    public TLTravelDbContext()
        : base()
    {
        //this.Database.EnsureCreated();
    }

    public TLTravelDbContext(DbContextOptions<TLTravelDbContext> options)
        : base(options)
    {
        //this.Database.EnsureCreated();
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasDefaultSchema("TLTRAVEL_0")
            .UseCollation("USING_NLS_COMP");

        modelBuilder.Entity<Agent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AGENT_PK");

            entity.ToTable("AGENT");

            entity.HasIndex(e => e.Name, "PARTNER_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.ComissionPercent)
                .HasColumnType("NUMBER(2,2)")
                .HasColumnName("COMISSIONPERCENT");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("CLIENT_PK");

            entity.ToTable("CLIENT");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<Extra>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("EXTRAS_PK");

            entity.ToTable("EXTRAS");

            entity.HasIndex(e => e.Name, "EXTRAS_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<FeedingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("FEEDINGTYPE_PK");

            entity.ToTable("FEEDINGTYPE");

            entity.HasIndex(e => e.Name, "FEEDINGTYPES_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<Hotel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("HOTEL_PK");

            entity.ToTable("HOTEL");

            entity.HasIndex(e => e.LocationId, "HOTEL_LOCATION_ID_IDX");

            entity.HasIndex(e => e.Name, "HOTEL_NAME_UK").IsUnique();

            entity.HasIndex(e => e.PartnerId, "HOTEL_PARTNER_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Contacts)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTACTS");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.IsTemporaryClosed)
                .HasDefaultValueSql("0 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISTEMPORARYCLOSED");
            entity.Property(e => e.LocationId)
                .HasColumnType("NUMBER")
                .HasColumnName("LOCATION_ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.PartnerId)
                .HasColumnType("NUMBER")
                .HasColumnName("PARTNER_ID");
            entity.Property(e => e.Stars)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("STARS");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Location).WithMany(p => p.Hotels)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTEL_LOCATION_FK");

            entity.HasOne(d => d.Partner).WithMany(p => p.Hotels)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTEL_AGENT_FK");
        });

        modelBuilder.Entity<HotelExtra>(entity =>
        {
            entity.HasKey(e => new { e.ExtrasId, e.HotelId }).HasName("HOTELEXTRAS_PK");

            entity.ToTable("HOTELEXTRAS");

            entity.HasIndex(e => e.ExtrasId, "HOTELEXTRAS_EXTRAS_ID_IDX");

            entity.HasIndex(e => e.HotelId, "HOTELEXTRAS_HOTEL_ID_IDX");

            entity.Property(e => e.ExtrasId)
                .HasColumnType("NUMBER")
                .HasColumnName("EXTRAS_ID");
            entity.Property(e => e.HotelId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTEL_ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1\n        ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Extras).WithMany(p => p.HotelExtras)
                .HasForeignKey(d => d.ExtrasId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTEXTRA_EXTRAS_FK");

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelExtras)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTEXTRA_HOTEL_FK");
        });

        modelBuilder.Entity<HotelFeedingType>(entity =>
        {
            entity.HasKey(e => new { e.HotelId, e.FeedingTypeId }).HasName("HOTELFEEDINGTYPES_PK");

            entity.ToTable("HOTELFEEDINGTYPES");

            entity.HasIndex(e => e.HotelId, "HOTELFEEDINGTYPES_HOTEL_ID_IDX");

            entity.HasIndex(e => e.FeedingTypeId, "HOTFEEDINGTYP_FEEDTYPE_ID_IDX");

            entity.Property(e => e.HotelId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTEL_ID");
            entity.Property(e => e.FeedingTypeId)
                .HasColumnType("NUMBER")
                .HasColumnName("FEEDINGTYPE_ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1\n        ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.FeedingType).WithMany(p => p.HotelFeedingTypes)
                .HasForeignKey(d => d.FeedingTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTFEDTYP_FEEDINGTYPE_FK");

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelFeedingTypes)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTFEDTYP_HOTEL_FK");
        });

        modelBuilder.Entity<HotelPhoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("HOTELPHOTOS_PK");

            entity.ToTable("HOTELPHOTOS");

            entity.HasIndex(e => e.HotelId, "HOTELPHOTOS_HOTEL_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.HotelId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTEL_ID");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasColumnType("BLOB")
                .HasColumnName("PHOTO");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelPhotos)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTELPHOTOS_HOTEL_FK");
        });

        modelBuilder.Entity<HotelRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("HOTELROOM_PK");

            entity.ToTable("HOTELROOM");

            entity.HasIndex(e => e.HotelId, "HOTELROOM_HOTEL_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.HotelId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTEL_ID");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.MaxAdults)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("MAXADULTS");
            entity.Property(e => e.MaxBabies)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("MAXBABIES");
            entity.Property(e => e.MaxChildren)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("MAXCHILDREN");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Price)
                .HasColumnType("NUMBER")
                .HasColumnName("PRICE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelRooms)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTELROOM_HOTEL_FK");
        });

        modelBuilder.Entity<HotelRoomExtra>(entity =>
        {
            entity.HasKey(e => new { e.ExtrasId, e.HotelRoomId }).HasName("HOTELROOMEXTRAS_PK");

            entity.ToTable("HOTELROOMEXTRAS");

            entity.HasIndex(e => e.ExtrasId, "HOTELROOMEXTRAS_EXTRAS_ID_IDX");

            entity.HasIndex(e => e.HotelRoomId, "HOTROOMEXTRAS_HOTROOM_ID_IDX");

            entity.Property(e => e.ExtrasId)
                .HasColumnType("NUMBER")
                .HasColumnName("EXTRAS_ID");
            entity.Property(e => e.HotelRoomId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTELROOM_ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1\n        ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Extras).WithMany(p => p.HotelRoomExtras)
                .HasForeignKey(d => d.ExtrasId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTROOMEXT_EXTRAS_FK");

            entity.HasOne(d => d.HotelRoom).WithMany(p => p.HotelRoomExtras)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOTROOMEXT_HOTELROOM_FK");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("LOCATION_PK");

            entity.ToTable("LOCATION");

            entity.HasIndex(e => e.Name, "LOCATIONS_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsAbroad)
                .HasColumnType("NUMBER")
                .HasColumnName("ISABROAD");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<Operator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("OPERATOR_PK");

            entity.ToTable("OPERATOR");

            entity.HasIndex(e => e.Name, "OPERATOR_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<PaymentChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PAYMENTCHANNEL_PK");

            entity.ToTable("PAYMENTCHANNEL");

            entity.HasIndex(e => e.Name, "PAYMENTCHANNELS_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PAYMENTTYPE_PK");

            entity.ToTable("PAYMENTTYPE");

            entity.HasIndex(e => e.Name, "PAYMENTTYPES_NAME_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("RESERVATION_PK");

            entity.ToTable("RESERVATION");

            entity.HasIndex(e => e.ClientId, "RESERVATION_CLIENT_ID_IDX");

            entity.HasIndex(e => e.HotelId, "RESERVATION_HOTEL_ID_IDX");

            entity.HasIndex(e => e.OperatorId, "RESERVATION_OPERATOR_ID_IDX");

            entity.HasIndex(e => e.ReservationStatusId, "RES_RESSTATUS_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.ClientId)
                .HasColumnType("NUMBER")
                .HasColumnName("CLIENT_ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.CustomerNotes)
                .IsUnicode(false)
                .HasColumnName("CUSTOMERNOTES");
            entity.Property(e => e.DateFrom)
                .HasColumnType("DATE")
                .HasColumnName("DATEFROM");
            entity.Property(e => e.DateTo)
                .HasColumnType("DATE")
                .HasColumnName("DATETO");
            entity.Property(e => e.HotelId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTEL_ID");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1\n        ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.OperatorId)
                .HasColumnType("NUMBER")
                .HasColumnName("OPERATOR_ID");
            entity.Property(e => e.ReservationStatusId)
                .HasColumnType("NUMBER")
                .HasColumnName("RESERVATIONSTATUS_ID");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("NUMBER")
                .HasColumnName("TOTALPRICE");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.Client).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.ClientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESERVATION_CLIENT_FK");

            entity.HasOne(d => d.Hotel).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESERVATION_HOTEL_FK");

            entity.HasOne(d => d.Operator).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.OperatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESERVATION_OPERATOR_FK");

            entity.HasOne(d => d.ReservationStatus).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.ReservationStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RES_RESSTATUS_FK");
        });

        modelBuilder.Entity<ReservationPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("RESPAYMENT_PK");

            entity.ToTable("RESERVATIONPAYMENT");

            entity.HasIndex(e => e.PaymentChannelId, "RESPAYMENT_PAYCHAN_ID_IDX");

            entity.HasIndex(e => e.PaymentTypeId, "RESPAYMENT_PAYTYPE_ID_IDX");

            entity.HasIndex(e => e.ReservationId, "RESPAYMENT_RES_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Amount)
                .HasColumnType("NUMBER")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.DueDate)
                .HasColumnType("DATE")
                .HasColumnName("DUEDATE");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1\n        ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.IsPaid)
                .HasColumnType("NUMBER")
                .HasColumnName("ISPAID");
            entity.Property(e => e.PaymentChannelId)
                .HasColumnType("NUMBER")
                .HasColumnName("PAYMENTCHANNEL_ID");
            entity.Property(e => e.PaymentTypeId)
                .HasColumnType("NUMBER")
                .HasColumnName("PAYMENTTYPE_ID");
            entity.Property(e => e.ReservationId)
                .HasColumnType("NUMBER")
                .HasColumnName("RESERVATION_ID");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.PaymentChannel).WithMany(p => p.ReservationPayments)
                .HasForeignKey(d => d.PaymentChannelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESPAYMENT_PAYMENTCHANNEL_FK");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.ReservationPayments)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESPAYMENT_PAYMENTTYPE_FK");

            entity.HasOne(d => d.Reservation).WithMany(p => p.ReservationPayments)
                .HasForeignKey(d => d.ReservationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESPAYMENT_RESERVATION_FK");
        });

        modelBuilder.Entity<ReservationRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("RESROOM_PK");

            entity.ToTable("RESERVATIONROOMS");

            entity.HasIndex(e => e.FeedingTypeId, "RESEROOMS_FEEDINGTYPE_ID_IDX");

            entity.HasIndex(e => e.HotelRoomId, "RESROOMS_HOTELROOM_ID_IDX");

            entity.HasIndex(e => e.ReservationId, "RESROOMS_RESERVATION_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Adults)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("ADULTS");
            entity.Property(e => e.Babies)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("BABIES");
            entity.Property(e => e.Children)
                .HasColumnType("NUMBER(38)")
                .HasColumnName("CHILDREN");
            entity.Property(e => e.FeedingTypeId)
                .HasColumnType("NUMBER")
                .HasColumnName("FEEDINGTYPE_ID");
            entity.Property(e => e.HotelRoomId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTELROOM_ID");
            entity.Property(e => e.Price)
                .HasColumnType("NUMBER")
                .HasColumnName("PRICE");
            entity.Property(e => e.ReservationId)
                .HasColumnType("NUMBER")
                .HasColumnName("RESERVATION_ID");

            entity.HasOne(d => d.FeedingType).WithMany(p => p.ReservationRooms)
                .HasForeignKey(d => d.FeedingTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESROOM_FEEDINGTYPE_FK");

            entity.HasOne(d => d.HotelRoom).WithMany(p => p.ReservationRooms)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESROOM_HOTELROOM_FK");

            entity.HasOne(d => d.Reservation).WithMany(p => p.ReservationRooms)
                .HasForeignKey(d => d.ReservationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RESROOM_RESERVATION_FK");
        });

        modelBuilder.Entity<ReservationStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("RESSTATUS_PK");

            entity.ToTable("RESERVATIONSTATUS");

            entity.HasIndex(e => e.Code, "RESERVATIONSTATUS_CODE_UK").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");
        });

        modelBuilder.Entity<RoomPhoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ROOMPHOTOS_PK");

            entity.ToTable("ROOMPHOTOS");

            entity.HasIndex(e => e.HotelRoomId, "ROOMPHOTOS_HOTELROOM_ID_IDX");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("NUMBER")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.CreatedOn)
                .HasColumnType("DATE")
                .HasColumnName("CREATEDON");
            entity.Property(e => e.HotelRoomId)
                .HasColumnType("NUMBER")
                .HasColumnName("HOTELROOM_ID");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1 ")
                .HasColumnType("NUMBER")
                .HasColumnName("ISACTIVE");
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasColumnType("BLOB")
                .HasColumnName("PHOTO");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("UPDATEDBY");
            entity.Property(e => e.UpdatedOn)
                .HasColumnType("DATE")
                .HasColumnName("UPDATEDON");

            entity.HasOne(d => d.HotelRoom).WithMany(p => p.RoomPhotos)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ROOMPHOTOS_HOTELROOM_FK");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
